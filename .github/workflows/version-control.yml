name: Version Control

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ master ]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-version:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository
            && (startsWith(github.head_ref, 'feature/') || startsWith(github.head_ref, 'hotfix/')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Determine update type
        id: version_type
        run: |
          if [[ "${{ github.head_ref }}" == feature/* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Run version update script
        id: run_script
        run: |
          VERSION=$(python version-updater.py ${{ steps.version_type.outputs.type }})
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Commit version update
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout "${{ github.head_ref }}"
          git add version version_log
          git commit -m "[${{ steps.run_script.outputs.version }}] <- ${{ steps.version_type.outputs.type }} up" || echo "No changes to commit"
          git push

      - name: Add version label to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              const ver = '${{ steps.run_script.outputs.version }}';
              const label = 'v' + ver;
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label
                });
              } catch (e) {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label,
                  color: '0366d6',
                  description: 'Release version'
                });
              }
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: [label]
              });